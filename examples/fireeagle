#!perl -w

use strict;
use lib qw(lib);
use JSON::Any;
use Data::Dumper;

my $CONFIG = ".fireeagle_config";


binmode STDOUT, ":utf8";


# Get the tokens from the command line, a config file or wherever 
my %tokens  = get_tokens(); 
my $app     = FireEagle->new(%tokens);

# Check to see we have a consumer key and secret
unless ($app->consumer_key && $app->consumer_secret) {
    die "You must go get a consumer key and secret from App\n";
} 

# If the app is authorized (i.e has an access token and secret)
# Then look at a restricted resourse
if ($app->authorized) {
    update_location(shift) if @ARGV;
    get_location($app);
}

# right, we need to get their access stuff
print "STEP 1: REQUEST FIREEAGLE AUTHORIZATION FOR THIS APP\n";
print "\tURL : ".$app->get_authorization_url( callback => 'oob' )."\n";
print "\n-- Please go to the above URL and authorize the app";
print "\n-- It will give you a code. Please type it here: ";
my $verifier = <STDIN>; print "\n";
chomp($verifier); $verifier =~ s!(^\s*|\s*$)!!g;
$app->verifier($verifier);

my ($access_token, $access_token_secret) = $app->request_access_token();

print "You have now authorized this app.\n";
print "Your access token and secret are:\n\n";
print "access_token=$access_token\n";
print "access_token_secret=$access_token_secret\n";
print "\n";
if (-f $CONFIG) {
    save_tokens($app);
    print "You should note these down but they have also been saved in $CONFIG\n\n";
} else {
    print "You should note these down or put them in $CONFIG with your consumer key and secret\n\n";
}
get_location($app);

sub get_tokens {
    my %tokens = FireEagle->load_tokens($CONFIG);
    while (@ARGV && $ARGV[0] =~ m!^(\w+)\=(\w+)$!) {
        $tokens{$1} = $2;
        shift @ARGV;
    }
    return %tokens;
}

sub save_tokens {
    my $app     = shift;
    my %tokens = $app->tokens;
    FireEagle->save_tokens($CONFIG, %tokens);
}

sub get_location {
	my $loc = $app->location;
    print "You're at ".$loc->{user}{location_hierarchy}[0]{name}."\n";
	exit(0);
}

sub update_location {
    my $loc = shift;
    return $app->update_location($loc);
}

package FireEagle;

use strict;
use base qw(Net::OAuth::Simple);
use JSON::Any;

sub new {
    my $class  = shift;
    my %tokens = @_;
    return $class->SUPER::new( tokens => \%tokens, 
                               protocol_version => '1.0a',
                               urls   => {
                                    authorization_url => 'https://fireeagle.yahoo.net/oauth/authorize',
                                    request_token_url => 'https://fireeagle.yahooapis.com/oauth/request_token',
                                    access_token_url  => 'https://fireeagle.yahooapis.com/oauth/access_token',
                               });
}

sub location {
	my $self = shift;
	my $form = shift || "json";
	my $url  = "https://fireeagle.yahooapis.com/api/0.1/user.${form}";
	my $json = $self->_make_restricted_request($url, 'GET');
	return _parse_json($json);
}

sub update_location {
    my $self = shift;
    my $loc  = shift;
    my $form = shift || "json";
    my $url  = "https://fireeagle.yahooapis.com/api/0.1/update.${form}";
    my $json = $self->_make_restricted_request($url, 'POST', address => $loc);
    my $obj  = _parse_json($json);
    my $stat = $obj->{stat};
    return 0 unless defined $stat;
    return 0 unless lc($stat) eq 'ok';
    return 1;
}

sub _parse_json {
    my $json = shift;
    die "Couldn't parse blank JSON" unless defined $json and $json !~ m!^\s*$!;
    my $obj  = eval { JSON::Any->new->from_json($json) };
    die $@ if $@;
    die "Couldn't parse JSON for some reason" unless defined $obj;
    return $obj;
}

sub _make_restricted_request {
    my $self     = shift;
    my $response = $self->make_restricted_request(@_);
    return $response->content;
}


1;